-->Creating tables s and r
create table s
(rollno number,
name varchar2(20));
create table r
(rollno number,
marks number);


--> Inserting records in s and r.
insert into s
values(1,'a');
insert into s
values(2,'b');


insert into r
values(1,90);
insert into r
values(2,87);

--->Creating an Equijoin View on s and r

Create or replace view SR
as
select s.rollno,s.name,r.marks
from s,r
where s.rollno =r.rollno;

--->

   ---------------------------------------------
create or replace trigger trig15
Instead of DELETE on SR
For Each Row
Begin
        /*Deleting the record from both the tables s and r.*/

          Delete from s
           where rollno = :old.rollno;
         
             Delete from r
             where rollno = :old.rollno;

End;



--->delete from sr where rollno=1;
---------------------------------------------------------
 Create or replace trigger tig12
    Instead Of UPDATE on SR
    For Each Row
     Begin
    /* Updating roll numbers from both the tables s and r */
              Update s  set rollno =   :new.rollno
                     where rollno  =  :old.rollno;
              Update r set rollno = :new.rollno
                       where rollno = :old.rollno;

   /* Updating name column of s table through view.*/
           Update s   set name = :new.name
                       where name = :old.name;

    /*Updating marks column of r table through view.*/
           Update r   set marks = :new.marks
                       where marks = :old.marks;
               End;



rollno=1
new roolno 11

upadte sr set rollno=11 where rollno=1;

old -->
new --->1

-------------------------------------------------------------
mutating-table error in trigger

create or replace trigger trigemp
after update on emp
for each row 
declare
minsal number;
begin
select min(salary) into minsal from emp;
if (:new.salary<minsal) then
raise_application_error(-20001,'new sal cannot be less than minsal'); 
end if;
end;


-->100  sal-->5000
update emp set salary=salary+1000 where empid =100;

-->100  sal-->6000




parent t1-->t2


begin
upadte---------
   begin
     insert ---------
     commit;
   end;
end;
--------------------------------------------
create or replace trigger trigemp
after update on emp
for each row 
declare
minsal number;
PRAGMA  AUTONOMOUS_TRANSACTION;
begin

select min(salary) into minsal from emp;
if (:new.salary<minsal) then
raise_application_error(-20001,'new sal cannot be less than minsal'); 
end if;
commit;
end;


-------------------------------------------
 

logon logoff triggers





CREATE TABLE TRIGGER_LOG(MSG VARCHAR2(30));

CREATE OR REPLACE TRIGGER TRG2
AFTER LOGON ON SCHEMA
BEGIN
INSERT INTO TRIGGER_LOG VALUES('LOGIN');
END;


-------------------------------------
CREATE OR REPLACE TRIGGER TRG1
BEFORE LOGOFF ON SCHEMA
BEGIN
INSERT INTO TRIGGER_LOG VALUES('LOGOFF');
END;


---------------------------------------------------

compound


create or replace trigger triggreNem
for [DML event]on tableName
compound trigger

before each row is
begin
---
----
end before each row;

after each row is
begin
---
----
end after each row;

before statement is
   begin
-----
-----
end before statement ;

after statement is
   begin
-----
-----
end after statement ;



------------------------------------------------
create or replace trigger compund_emp
for insert or delete on emp
compound trigger
 after each row is
   begin
    dbms_output.put_line('row level');
 end after each row;

after statement is
   begin
    dbms_output.put_line('statement level');
 end after statement ;
end;
----------------------------------------------------------


begin
 execute immediate 'create table test11(a number)';
end;
--------------------------
dbms_sql.open_cursor
dbms_sql.parse
dbms_sql.execute
dbms_sql.close_cursor
-----------------------------------------------
declare
cursor_name integer;
a number;
begin
cursor_name:=dbms_sql.open_cursor;
dbms_sql.parse(cursor_name,'create table test1(a number)',dbms_sql.native);
a:=dbms_sql.execute(cursor_name);
dbms_sql.close_cursor(cursor_name);
end;


----------------------------------------------------
create or replace procedure drop_trigger
is
cursor Ctrigger_name is select trigger_name from user_triggers;
str varchar(100):='drop trigger ';
begin

for t_name in Ctrigger_name
loop
if(Ctrigger_name%rowcount>0) then
  str:=str||t_name.trigger_name;
  execute immediate str;
  dbms_output.put_line('trigger dropped');
    str:='drop trigger ';
end if;
end loop;
END;

execute drop_trigger;

---------------------------------------------------
create or replace procedure drop_trigger
is
cursor Ctrigger_name is select trigger_name from user_triggers;
str varchar(100):='drop trigger ';
CURSOR_NAME INTEGER;
A NUMBER;
begin

for t_name in Ctrigger_name
loop
if(Ctrigger_name%rowcount>0) then
    CURSOR_NAME:=DBMS_SQL.OPEN_CURSOR;
str:=str||t_name.trigger_name;
DBMS_SQL.PARSE(CURSOR_NAME,STR,DBMS_SQL.NATIVE);
A:=DBMS_SQL.EXECUTE(CURSOR_NAME);
DBMS_SQL.CLOSE_CURSOR(CURSOR_NAME); 
   dbms_output.put_line('trigger dropped');
    str:='drop trigger ';
end if;
end loop;
END;


execute drop_trigger;
