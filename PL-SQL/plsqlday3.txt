declare
------
------
begin
	declare
	------
	begin
	-----
	-----
	exception
	---
	---
	end;
-----
-----
exception
---
end;







----------------------------------------------------------
procedures ,functions 
--------------------------------------------------------------
Procedure--> performs an action
function--> performs calculations and returns single value



create [or replace] procedure procedureNAme(parameterName mode datatype,parameterName2 mode datatype,.....)
 [AUTHID <CURRENT_USER | DEFINER>]
is
---
----
begin
----
----
execption
---
----
end;
user_source-->DD
user_errors-->
show error



  three parameter modes
  IN---default  (pass by reference)
  OUT  (pass by value)
  IN OUT (pass by value)
- ----------------------------------------------
create or replace procedure addData(a number, b number) 
--formal parameters
is 
c number;
begin
c:=a+b;
dbms_output.put_line('addition is :'||c);
end addData;
--c------------





to see errors
show error --->command
select * from user_errors--->DD



pcode is generated on successfull complitations

to execute
-------------
execute addData(4,5); -- actual parameters
exec addData(4,5);
-----------------------------------------------------






begin
addData(b=>4,a=>3); --named notation
addData(5,5); --Positional notation
addData(5,b=>6); --Mixed notation
end;
add(1,2,3,4,5,6)
add(1,2,3,d=>,f=> e=>)




-------------------------------------------------------------
create or replace procedure addData1(a number, b number, c out  number)
is 
begin
c:=a+b;
--dbms_output.put_line('addition is :'||c);
end addData1;

------------
to execute from command prompt
-----------
variable c number
execute addData1(4,5,:c);

print c

---------------------------------




------------to execute from browser-----------
declare
sum1 number;
begin
addData1(13,4,sum1);
dbms_output.put_line('addition is ='||sum1);
end;
-----------------------------------------------------
create or replace procedure squareOfNumber( a in out  number)
is
begin
a:=a*a;
end;

---------------------
declare
s number:=5;
begin
dbms_output.put_line('value of s before calling procedure s='||s);
squareOfNumber(s);
dbms_output.put_line('value of s after calling procedure s='||s);
end;
-----------------
variable a number
begin
:a:=5;
squareOfNumber(:a);
end;
--------------------------------




CREATE OR REPLACE PROCEDURE Create_Dept(deptno number,dname varchar2,location number default 1900) as
BEGIN
INSERT INTO  departments(department_id,Location_id,department_name) VALUES(deptno,location,dname);
END;

--INSERT INTO  departments values(10,'yyy',null,1700)

Positional notation

execute Create_Dept(11,'testdept',1800);

named notation
  execute create_dept(dname=>'testdept',location=>3200,deptno=>11);

Mixed  Notation 

execute create_dept(11,location=>3200,dname=>'testdept');

execute create_dept(11,'testdept');

select department_id,department_name,Location_id from departments where department_id=11;


------------------------------------------------------------------

hr is owner of GetEmpDetails procedure
CREATE OR REPLACE PROCEDURE  GetEmpDetails(eid IN number,
        name OUT varchar2, sal OUT number ) 
authid CURRENT_USER
 IS
   BEGIN
      SELECT last_name, salary INTO name, sal 
      FROM employees WHERE employee_id=eid;
   EXCEPTION
         WHEN others  THEN
         dbms_output.put_line('no data found');
END GetEmpDetails ;
--------------------------------------------------
 declare
 name varchar2(300);
 sal number; 
begin
hr.GetEmpDetails(100,name,sal) ;
dbms_output.put_line(name);
dbms_output.put_line(sal);
end;
---------------------------------------------
execute the procedure

variable n varchar2(20)
variable s number
execute getempdetails(100,:n,:s);
--------------------------
declare
s number;
n varchar2(20);
begin
getempdetails(100,n,s);
dbms_output.put_line(s);
dbms_output.put_line(n);
end;


-------------------------------------------
-->hr is owner of getdetails procedure it uses emp table of scott user in the procedure.

-->scott is owner of emptable  and scott give privilege to hr on emp table

-->if procedure is created with definer right(runs under the privilege of owners)

-->grant exceute on getdetails to anjana

-->execute getdetails from anjana user it will work fine
---------------------------------------------------
authid current_user
-->hr is owner of getdetails procedure it uses emp table of scott user in the procedure.

-->scott is owner of emptable  and scott give privilege to hr on emp table

-->if procedure is created with authid is current_user(runs under the privilege of current user)

-->grant exceute on getdetails to anjana

-->execute getdetails from anjana user it will not work as anjana does not have privilege on emp table of scott.


-------------------------------------------------------
------------------------------------------
create or replace procedure countstudent
authid current_user
is
c number;
begin
select count(*) into c from hr.student;
dbms_output.put_line(c);
end;
------------------------------------------------------




drop procedure procedureNAme;

drop procedure getempdetail;




--------------------------------------------------------
create or replace function functionName(parameterName mode datatype,parameterName2 mode datatype,.....)
return datatype
 [AUTHID <CURRENT_USER | DEFINER>]
is
---
----
begin
----
----
execption
---
----
end;
-------------------------------------------------


create or replace function concat1(val1 varchar2, val2 varchar2)
return varchar2
is
begin
return (val1||val2);
end;
----------------------------
variable s varchar2(20)
execute :s:=concat1('hello','world');
print s
---------------------------------------------------
select concat1('hello' ,'world') from dual;
select concat1(last_name,first_name) from employees;

-----------------------------------------------------------
create or replace function concat11(val1 varchar2, val2 varchar2, val3 out varchar2, val4 out varchar2)
return varchar2
is
begin
val3:=(val1||val2);
return val3;
end;
cannot call from sql statement
-------------------------------------------------------------
create or replace function TotalEmp return number
is
Dcount number;
begin
select count(employee_id) into Dcount from employees;
return Dcount;
end;
/
DECLARE
   empcount number;
BEGIN
   empcount := TotalEmp;
   dbms_output.put_line('Total no. of Employees: ' || empcount);
END;
-------------------------------------------------------
create or replace function CalTax(sal number) return number
is
begin
return (sal*0.10);
end;


select salary, CalTax(salary) from employees;


alter table employees 
add tax number;

update employees set tax=CalTax(salary) ;
-----------------------------------------------------
drop function functionName;
drop function CalTax;

-------------------------------------------------------
Package
create or replace package packagename
----
----
end;

create or replace package body packagename
as
----
----
end;
-----------------------------------------------------
create or replace package overloadEx
as
procedure add(a number, b number);
procedure add(a number, b number, c number);
procedure add(a varchar2, b varchar2);
end;
/
create or replace package body overloadEx
as
procedure add(a number, b number)
is
c number;
begin
c:=a+b;
dbms_output.put_line(c);
end add;
procedure add(a number, b number, c number)
is
d number;
begin
d:=a+b+c;
dbms_output.put_line(d);
end add;
procedure add(a varchar2, b varchar2)
is
d varchar2(40);
begin
d:=a||b;
dbms_output.put_line(d);
end add;


end overloadEx;



execute overloadEx.add(5,5);
execute overloadEx.add(5,5,8);
execute overloadEx.add('hello','world'); 



  










